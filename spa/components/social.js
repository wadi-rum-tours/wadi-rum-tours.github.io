/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i].src;
	child_ctx[4] = list[i].ico;
	return child_ctx;
}

// (22:4) {#each arrSocial as { src, ico }}
function create_each_block(ctx) {
	let a;
	let i;
	let i_class_value;
	let t;
	let a_href_value;

	return {
		c() {
			a = element("a");
			i = element("i");
			t = space();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", {
				href: true,
				role: true,
				target: true,
				rel: true,
				class: true
			});

			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach);
			t = claim_space(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(i, "class", i_class_value = "" + (/*ico*/ ctx[4] + " font-medium " + (/*ico*/ ctx[4] == "lab la-keybase"
			? "text-3xl pb-0.5"
			: "text-2xl pt-0.5")));

			attr(a, "href", a_href_value = /*src*/ ctx[3]);
			attr(a, "role", "button");
			attr(a, "target", "_blank");
			attr(a, "rel", "noopener");
			attr(a, "class", "btn-round mx-0.5");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, i);
			append(a, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let h4;
	let t0;
	let t1;
	let div0;
	let each_value = /*arrSocial*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			h4 = element("h4");
			t0 = text("Social Links");
			t1 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h4 = claim_element(div1_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, "Social Links");
			h4_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h4, "class", "header mt-2 mb-1");
			attr(div0, "class", "mb-4");
			attr(div1, "class", "row");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h4);
			append(h4, t0);
			append(div1, t1);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*arrSocial*/ 1) {
				each_value = /*arrSocial*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { socialLinks } = $$props;

	// -------------------------------------------------------------
	// BUG?: svelte #each loop is not functional with socialLinks
	// Following js function to parse socialLinks into array arrSocial
	// -------------------------------------------------------------
	let arrSocial = [];

	function printSocial() {
		for (let i in socialLinks) {
			if (socialLinks[i].enabled) {
				arrSocial.push({
					src: socialLinks[i].src,
					ico: socialLinks[i].ico
				});
			}
		}
	}

	$$self.$$set = $$props => {
		if ("socialLinks" in $$props) $$invalidate(1, socialLinks = $$props.socialLinks);
	};

	$: printSocial();
	return [arrSocial, socialLinks];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { socialLinks: 1 });
	}
}

export default Component;