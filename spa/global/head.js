/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import SEO from "../scripts/SEO.svelte";

function create_key_block(ctx) {
	let seo;
	let current;

	seo = new SEO({
			props: {
				idxContent: /*idxContent*/ ctx[0],
				content: /*content*/ ctx[1],
				baseurl: /*baseurl*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(seo.$$.fragment);
		},
		l(nodes) {
			claim_component(seo.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(seo, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const seo_changes = {};
			if (dirty & /*idxContent*/ 1) seo_changes.idxContent = /*idxContent*/ ctx[0];
			if (dirty & /*content*/ 2) seo_changes.content = /*content*/ ctx[1];
			if (dirty & /*baseurl*/ 4) seo_changes.baseurl = /*baseurl*/ ctx[2];
			seo.$set(seo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(seo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(seo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(seo, detaching);
		}
	};
}

// (28:2) {#if idxContent.theme.codeHighlighting}
function create_if_block_1(ctx) {
	let link;

	return {
		c() {
			link = element("link");
			this.h();
		},
		l(nodes) {
			link = claim_element(nodes, "LINK", { rel: true, href: true });
			this.h();
		},
		h() {
			attr(link, "rel", "stylesheet");
			attr(link, "href", "assets/prism.css");
		},
		m(target, anchor) {
			insert(target, link, anchor);
		},
		d(detaching) {
			if (detaching) detach(link);
		}
	};
}

// (32:2) {#if idxContent.theme.mathTypesetting}
function create_if_block(ctx) {
	let link;

	return {
		c() {
			link = element("link");
			this.h();
		},
		l(nodes) {
			link = claim_element(nodes, "LINK", { rel: true, href: true });
			this.h();
		},
		h() {
			attr(link, "rel", "stylesheet");
			attr(link, "href", "assets/katex.min.css");
		},
		m(target, anchor) {
			insert(target, link, anchor);
		},
		d(detaching) {
			if (detaching) detach(link);
		}
	};
}

function create_fragment(ctx) {
	let head;
	let meta0;
	let t0;
	let meta1;
	let t1;
	let previous_key = /*isPost*/ ctx[3];
	let t2;
	let base;
	let t3;
	let script;
	let script_src_value;
	let t4;
	let link0;
	let t5;
	let link1;
	let t6;
	let t7;
	let t8;
	let link2;
	let current;
	let key_block = create_key_block(ctx);
	let if_block0 = /*idxContent*/ ctx[0].theme.codeHighlighting && create_if_block_1(ctx);
	let if_block1 = /*idxContent*/ ctx[0].theme.mathTypesetting && create_if_block(ctx);

	return {
		c() {
			head = element("head");
			meta0 = element("meta");
			t0 = space();
			meta1 = element("meta");
			t1 = space();
			key_block.c();
			t2 = space();
			base = element("base");
			t3 = space();
			script = element("script");
			t4 = space();
			link0 = element("link");
			t5 = space();
			link1 = element("link");
			t6 = space();
			if (if_block0) if_block0.c();
			t7 = space();
			if (if_block1) if_block1.c();
			t8 = space();
			link2 = element("link");
			this.h();
		},
		l(nodes) {
			head = claim_element(nodes, "HEAD", {});
			var head_nodes = children(head);
			meta0 = claim_element(head_nodes, "META", { charset: true });
			t0 = claim_space(head_nodes);
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			t1 = claim_space(head_nodes);
			key_block.l(head_nodes);
			t2 = claim_space(head_nodes);
			base = claim_element(head_nodes, "BASE", { href: true });
			t3 = claim_space(head_nodes);
			script = claim_element(head_nodes, "SCRIPT", { type: true, src: true });
			var script_nodes = children(script);
			script_nodes.forEach(detach);
			t4 = claim_space(head_nodes);
			link0 = claim_element(head_nodes, "LINK", { rel: true, type: true, href: true });
			t5 = claim_space(head_nodes);
			link1 = claim_element(head_nodes, "LINK", { rel: true, href: true });
			t6 = claim_space(head_nodes);
			if (if_block0) if_block0.l(head_nodes);
			t7 = claim_space(head_nodes);
			if (if_block1) if_block1.l(head_nodes);
			t8 = claim_space(head_nodes);
			link2 = claim_element(head_nodes, "LINK", { rel: true, href: true });
			head_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(meta0, "charset", "utf-8");
			attr(meta1, "name", "viewport");
			attr(meta1, "content", "width=device-width,initial-scale=1");
			attr(base, "href", /*baseurl*/ ctx[2]);
			attr(script, "type", "module");
			if (script.src !== (script_src_value = "spa/ejected/main.js")) attr(script, "src", script_src_value);
			attr(link0, "rel", "icon");
			attr(link0, "type", "image/svg+xml");
			attr(link0, "href", "assets/logo.svg");
			attr(link1, "rel", "stylesheet");
			attr(link1, "href", "assets/tailwind.global.css");
			attr(link2, "rel", "stylesheet");
			attr(link2, "href", "spa/bundle.css");
		},
		m(target, anchor) {
			insert(target, head, anchor);
			append(head, meta0);
			append(head, t0);
			append(head, meta1);
			append(head, t1);
			key_block.m(head, null);
			append(head, t2);
			append(head, base);
			append(head, t3);
			append(head, script);
			append(head, t4);
			append(head, link0);
			append(head, t5);
			append(head, link1);
			append(head, t6);
			if (if_block0) if_block0.m(head, null);
			append(head, t7);
			if (if_block1) if_block1.m(head, null);
			append(head, t8);
			append(head, link2);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*isPost*/ 8 && safe_not_equal(previous_key, previous_key = /*isPost*/ ctx[3])) {
				group_outros();
				transition_out(key_block, 1, 1, noop);
				check_outros();
				key_block = create_key_block(ctx);
				key_block.c();
				transition_in(key_block);
				key_block.m(head, t2);
			} else {
				key_block.p(ctx, dirty);
			}

			if (!current || dirty & /*baseurl*/ 4) {
				attr(base, "href", /*baseurl*/ ctx[2]);
			}

			if (/*idxContent*/ ctx[0].theme.codeHighlighting) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(head, t7);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*idxContent*/ ctx[0].theme.mathTypesetting) {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(head, t8);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(key_block);
			current = true;
		},
		o(local) {
			transition_out(key_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(head);
			key_block.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { idxContent } = $$props,
		{ allPages } = $$props,
		{ content } = $$props,
		{ baseurl } = $$props;

	let isPost;

	$$self.$$set = $$props => {
		if ("idxContent" in $$props) $$invalidate(0, idxContent = $$props.idxContent);
		if ("allPages" in $$props) $$invalidate(4, allPages = $$props.allPages);
		if ("content" in $$props) $$invalidate(1, content = $$props.content);
		if ("baseurl" in $$props) $$invalidate(2, baseurl = $$props.baseurl);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*content*/ 2) {
			// Defne key value for SEO updates
			$: $$invalidate(3, isPost = content.type === "posts" ? true : false);
		}
	};

	return [idxContent, content, baseurl, isPost, allPages];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			idxContent: 0,
			allPages: 4,
			content: 1,
			baseurl: 2
		});
	}
}

export default Component;