/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import Hoverable from "../scripts/hoverable.svelte";

function create_default_slot(ctx) {
	let button;
	let span;
	let i;
	let span_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			span = element("span");
			i = element("i");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, class: true, style: true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			i = claim_element(span_nodes, "I", { class: true });
			children(i).forEach(detach);
			span_nodes.forEach(detach);
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(i, "class", "accent las la-chevron-circle-down text-5xl lg:text-6xl rounded-full overflow-hidden bg-clip-content opacity-80 hover:opacity-100");
			attr(span, "class", span_class_value = "inline-block " + (/*hovering*/ ctx[5] ? "animate-bounce" : ""));
			attr(button, "type", "button");
			attr(button, "class", "absolute bottom-0 sm:bottom-10 md:bottom-20");
			set_style(button, "left", "25%");
			set_style(button, "transform", "translate(-50%)");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span);
			append(span, i);

			if (!mounted) {
				dispose = listen(button, "click", scrollDown);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*hovering*/ 32 && span_class_value !== (span_class_value = "inline-block " + (/*hovering*/ ctx[5] ? "animate-bounce" : ""))) {
				attr(span, "class", span_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let h20;
	let t0_value = /*hero*/ ctx[2].pre + "";
	let t0;
	let span;
	let t1_value = /*hero*/ ctx[2].accent + "";
	let t1;
	let br;
	let t2_value = /*hero*/ ctx[2].post + "";
	let t2;
	let t3;
	let h3;
	let t4_value = /*hero*/ ctx[2].tagline + "";
	let t4;
	let t5;
	let div1;
	let t6;
	let div2;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let t7;
	let cite0;
	let raw0_value = /*image*/ ctx[1].citation.replaceAll("<a ", "<a target='blank' rel='noopener' ") + "";
	let t8;
	let hoverable;
	let t9;
	let div7;
	let div4;
	let img1;
	let img1_src_value;
	let img1_alt_value;
	let t10;
	let div6;
	let div5;
	let h21;
	let t11;
	let t12;
	let p;
	let t13;
	let cite1;
	let raw2_value = /*splash*/ ctx[3].citation.replaceAll("<a ", "<a target='blank' rel='noopener' ") + "";
	let current;

	hoverable = new Hoverable({
			props: {
				$$slots: {
					default: [
						create_default_slot,
						({ hovering }) => ({ 5: hovering }),
						({ hovering }) => hovering ? 32 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			h20 = element("h2");
			t0 = text(t0_value);
			span = element("span");
			t1 = text(t1_value);
			br = element("br");
			t2 = text(t2_value);
			t3 = space();
			h3 = element("h3");
			t4 = text(t4_value);
			t5 = space();
			div1 = element("div");
			t6 = space();
			div2 = element("div");
			img0 = element("img");
			t7 = space();
			cite0 = element("cite");
			t8 = space();
			create_component(hoverable.$$.fragment);
			t9 = space();
			div7 = element("div");
			div4 = element("div");
			img1 = element("img");
			t10 = space();
			div6 = element("div");
			div5 = element("div");
			h21 = element("h2");
			t11 = text(/*title*/ ctx[0]);
			t12 = space();
			p = element("p");
			t13 = space();
			cite1 = element("cite");
			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", { id: true, class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h20 = claim_element(div0_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, t0_value);
			span = claim_element(h20_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach);
			br = claim_element(h20_nodes, "BR", {});
			t2 = claim_text(h20_nodes, t2_value);
			h20_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t4 = claim_text(h3_nodes, t4_value);
			h3_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t5 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", {});
			children(div1).forEach(detach);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			img0 = claim_element(div2_nodes, "IMG", { class: true, src: true, alt: true });
			t7 = claim_space(div2_nodes);
			cite0 = claim_element(div2_nodes, "CITE", { class: true });
			var cite0_nodes = children(cite0);
			cite0_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t8 = claim_space(div3_nodes);
			claim_component(hoverable.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach);
			t9 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { id: true, class: true });
			var div7_nodes = children(div7);
			div4 = claim_element(div7_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);

			img1 = claim_element(div4_nodes, "IMG", {
				class: true,
				style: true,
				src: true,
				alt: true
			});

			div4_nodes.forEach(detach);
			t10 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true, style: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			h21 = claim_element(div5_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t11 = claim_text(h21_nodes, /*title*/ ctx[0]);
			h21_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			t12 = claim_space(div6_nodes);
			p = claim_element(div6_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t13 = claim_space(nodes);
			cite1 = claim_element(nodes, "CITE", { class: true });
			var cite1_nodes = children(cite1);
			cite1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "accent-b");
			attr(h20, "class", "header text-xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl");
			attr(h3, "class", "tag text-base sm:text-xl md:text-2xl lg:text-3xl xl:text-4xl");
			attr(div0, "class", "pl-2 md:pl-6 lg:pl-10 xl:pl-16 w-screen-30 sm:w-screen-40 md:w-screen-50 lg:w-screen-60 xl:w-screen-80 absolute bottom-10 sm:bottom-1/4");
			attr(img0, "class", "w-full object-cover object-bottom h-screen-40 sm:h-screen-60 md:h-screen-70 lg:h-screen-80 xl:h-screen-90");
			if (img0.src !== (img0_src_value = "assets/pages/" + /*image*/ ctx[1].src)) attr(img0, "src", img0_src_value);
			attr(img0, "alt", img0_alt_value = /*image*/ ctx[1].alt);
			attr(cite0, "class", "text-meta");
			attr(div3, "id", "hero");
			attr(div3, "class", "w-full grid grid-cols-2 relative");
			attr(img1, "class", "w-full object-center object-cover h-screen-80 lg:h-screen-90");
			set_style(img1, "filter", "brightness(60%)");
			if (img1.src !== (img1_src_value = "assets/pages/" + /*splash*/ ctx[3].src)) attr(img1, "src", img1_src_value);
			attr(img1, "alt", img1_alt_value = /*splash*/ ctx[3].alt);
			attr(div4, "class", "w-full pt-16");
			attr(h21, "class", "accent text-white text-4xl");
			attr(div5, "class", "w-full text-lg px-6 pt-10");
			attr(p, "class", "text-white text-md sm:text-lg lg:text-xl 2xl:text-2xl px-6 py-6");
			attr(div6, "class", "absolute ml-2 md:ml-12 xl:mt-6 bg-black bg-opacity-50 w-screen-45 sm:w-screen-70 lg:w-screen-80 h-screen-70");
			set_style(div6, "top", "14%");
			set_style(div6, "overflow-y", "auto");
			attr(div7, "id", "about");
			attr(div7, "class", "relative");
			attr(cite1, "class", "text-meta relative block");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, h20);
			append(h20, t0);
			append(h20, span);
			append(span, t1);
			append(h20, br);
			append(h20, t2);
			append(div0, t3);
			append(div0, h3);
			append(h3, t4);
			append(div3, t5);
			append(div3, div1);
			append(div3, t6);
			append(div3, div2);
			append(div2, img0);
			append(div2, t7);
			append(div2, cite0);
			cite0.innerHTML = raw0_value;
			append(div3, t8);
			mount_component(hoverable, div3, null);
			insert(target, t9, anchor);
			insert(target, div7, anchor);
			append(div7, div4);
			append(div4, img1);
			append(div7, t10);
			append(div7, div6);
			append(div6, div5);
			append(div5, h21);
			append(h21, t11);
			append(div6, t12);
			append(div6, p);
			p.innerHTML = /*articleBody*/ ctx[4];
			insert(target, t13, anchor);
			insert(target, cite1, anchor);
			cite1.innerHTML = raw2_value;
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*hero*/ 4) && t0_value !== (t0_value = /*hero*/ ctx[2].pre + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*hero*/ 4) && t1_value !== (t1_value = /*hero*/ ctx[2].accent + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*hero*/ 4) && t2_value !== (t2_value = /*hero*/ ctx[2].post + "")) set_data(t2, t2_value);
			if ((!current || dirty & /*hero*/ 4) && t4_value !== (t4_value = /*hero*/ ctx[2].tagline + "")) set_data(t4, t4_value);

			if (!current || dirty & /*image*/ 2 && img0.src !== (img0_src_value = "assets/pages/" + /*image*/ ctx[1].src)) {
				attr(img0, "src", img0_src_value);
			}

			if (!current || dirty & /*image*/ 2 && img0_alt_value !== (img0_alt_value = /*image*/ ctx[1].alt)) {
				attr(img0, "alt", img0_alt_value);
			}

			if ((!current || dirty & /*image*/ 2) && raw0_value !== (raw0_value = /*image*/ ctx[1].citation.replaceAll("<a ", "<a target='blank' rel='noopener' ") + "")) cite0.innerHTML = raw0_value;;
			const hoverable_changes = {};

			if (dirty & /*$$scope, hovering*/ 96) {
				hoverable_changes.$$scope = { dirty, ctx };
			}

			hoverable.$set(hoverable_changes);

			if (!current || dirty & /*splash*/ 8 && img1.src !== (img1_src_value = "assets/pages/" + /*splash*/ ctx[3].src)) {
				attr(img1, "src", img1_src_value);
			}

			if (!current || dirty & /*splash*/ 8 && img1_alt_value !== (img1_alt_value = /*splash*/ ctx[3].alt)) {
				attr(img1, "alt", img1_alt_value);
			}

			if (!current || dirty & /*title*/ 1) set_data(t11, /*title*/ ctx[0]);
			if (!current || dirty & /*articleBody*/ 16) p.innerHTML = /*articleBody*/ ctx[4];;
			if ((!current || dirty & /*splash*/ 8) && raw2_value !== (raw2_value = /*splash*/ ctx[3].citation.replaceAll("<a ", "<a target='blank' rel='noopener' ") + "")) cite1.innerHTML = raw2_value;;
		},
		i(local) {
			if (current) return;
			transition_in(hoverable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(hoverable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(hoverable);
			if (detaching) detach(t9);
			if (detaching) detach(div7);
			if (detaching) detach(t13);
			if (detaching) detach(cite1);
		}
	};
}

function scrollDown() {
	window.scrollTo({ top: 900, left: 0, behavior: "smooth" });
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ image } = $$props,
		{ hero } = $$props,
		{ splash } = $$props,
		{ articleBody } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("image" in $$props) $$invalidate(1, image = $$props.image);
		if ("hero" in $$props) $$invalidate(2, hero = $$props.hero);
		if ("splash" in $$props) $$invalidate(3, splash = $$props.splash);
		if ("articleBody" in $$props) $$invalidate(4, articleBody = $$props.articleBody);
	};

	return [title, image, hero, splash, articleBody];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			image: 1,
			hero: 2,
			splash: 3,
			articleBody: 4
		});
	}
}

export default Component;