/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	handle_promise,
	init,
	insert,
	listen,
	mount_component,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_await_block_branch
} from "svelte/internal";

import Aside from "./aside.svelte";

// function and API endpoint for sending the contact request
import { send_contact } from "../scripts/send_contact.svelte";

function create_else_block_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[3]);
		},
		l(nodes) {
			t = claim_text(nodes, /*title*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 8) set_data(t, /*title*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (43:14) {#if tname.length > 1}
function create_if_block_3(ctx) {
	let span0;
	let t0_value = /*tname*/ ctx[7][0].toUpperCase() + "";
	let t0;
	let t1;
	let span1;
	let t2_value = /*tname*/ ctx[7][1].toUpperCase() + "";
	let t2;

	return {
		c() {
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			t2 = text(t2_value);
			this.h();
		},
		l(nodes) {
			span0 = claim_element(nodes, "SPAN", { class: true, style: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, t0_value);
			t1 = claim_space(span0_nodes);
			span0_nodes.forEach(detach);
			span1 = claim_element(nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, t2_value);
			span1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "accent");
			set_style(span0, "opacity", "1");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			append(span0, t0);
			append(span0, t1);
			insert(target, span1, anchor);
			append(span1, t2);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(span1);
		}
	};
}

// (132:18) {#if contact}
function create_if_block(ctx) {
	let await_block_anchor;
	let promise;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 15,
		error: 16
	};

	handle_promise(promise = /*contact*/ ctx[5], info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		l(nodes) {
			await_block_anchor = empty();
			info.block.l(nodes);
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*contact*/ 32 && promise !== (promise = /*contact*/ ctx[5]) && handle_promise(promise, info)) {
				
			} else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

// (143:20) {:catch error}
function create_catch_block(ctx) {
	let pre;
	let t0;
	let t1_value = (/*error*/ ctx[16].message || "failed") + "";
	let t1;

	return {
		c() {
			pre = element("pre");
			t0 = text("â›” Response: ");
			t1 = text(t1_value);
			this.h();
		},
		l(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t0 = claim_text(pre_nodes, "â›” Response: ");
			t1 = claim_text(pre_nodes, t1_value);
			pre_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(pre, "class", "footnote");
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t0);
			append(pre, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*contact*/ 32 && t1_value !== (t1_value = (/*error*/ ctx[16].message || "failed") + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

// (135:20) {:then resp}
function create_then_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*resp*/ ctx[15].statusText === "Accepted") return create_if_block_1;
		if (/*resp*/ ctx[15].statusText === "form incomplete") return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (140:22) {:else}
function create_else_block(ctx) {
	let pre;
	let t0;
	let t1_value = (/*resp*/ ctx[15].statusText || "sent") + "";
	let t1;

	return {
		c() {
			pre = element("pre");
			t0 = text("Response: ");
			t1 = text(t1_value);
			this.h();
		},
		l(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t0 = claim_text(pre_nodes, "Response: ");
			t1 = claim_text(pre_nodes, t1_value);
			pre_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(pre, "class", "footnote");
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t0);
			append(pre, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*contact*/ 32 && t1_value !== (t1_value = (/*resp*/ ctx[15].statusText || "sent") + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

// (138:70) 
function create_if_block_2(ctx) {
	let pre;
	let t;

	return {
		c() {
			pre = element("pre");
			t = text("â›” Response: form incomplete!");
			this.h();
		},
		l(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t = claim_text(pre_nodes, "â›” Response: form incomplete!");
			pre_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(pre, "class", "footnote");
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

// (136:22) {#if resp.statusText === "Accepted"}
function create_if_block_1(ctx) {
	let pre;
	let t;

	return {
		c() {
			pre = element("pre");
			t = text("ðŸŽ‰ Done: message sent");
			this.h();
		},
		l(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			t = claim_text(pre_nodes, "ðŸŽ‰ Done: message sent");
			pre_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(pre, "class", "footnote");
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

// (133:36)                        <p>Sending...</p>                     {:then resp}
function create_pending_block(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text("Sending...");
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Sending...");
			p_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div0;
	let t0;
	let div17;
	let div16;
	let div14;
	let div13;
	let div12;
	let h2;
	let t1;
	let p;
	let t2;
	let t3;
	let form;
	let div3;
	let div1;
	let label0;
	let t4;
	let t5;
	let input0;
	let t6;
	let div2;
	let label1;
	let t7;
	let t8;
	let input1;
	let t9;
	let div5;
	let div4;
	let label2;
	let t10;
	let t11;
	let input2;
	let t12;
	let div7;
	let div6;
	let label3;
	let t13;
	let t14;
	let textarea;
	let t15;
	let div11;
	let div8;
	let button;
	let t16;
	let t17;
	let div9;
	let t18;
	let div10;
	let t19;
	let div15;
	let aside;
	let t20;
	let div18;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*tname*/ ctx[7].length > 1) return create_if_block_3;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*contact*/ ctx[5] && create_if_block(ctx);

	aside = new Aside({
			props: {
				allPosts: /*allPosts*/ ctx[0],
				catgPosts: /*catgPosts*/ ctx[1],
				tagsPosts: /*tagsPosts*/ ctx[2],
				socialLinks: /*socialLinks*/ ctx[8]
			}
		});

	return {
		c() {
			section = element("section");
			div0 = element("div");
			t0 = space();
			div17 = element("div");
			div16 = element("div");
			div14 = element("div");
			div13 = element("div");
			div12 = element("div");
			h2 = element("h2");
			if_block0.c();
			t1 = space();
			p = element("p");
			t2 = text(/*articleBody*/ ctx[4]);
			t3 = space();
			form = element("form");
			div3 = element("div");
			div1 = element("div");
			label0 = element("label");
			t4 = text("First Name");
			t5 = space();
			input0 = element("input");
			t6 = space();
			div2 = element("div");
			label1 = element("label");
			t7 = text("Last Name");
			t8 = space();
			input1 = element("input");
			t9 = space();
			div5 = element("div");
			div4 = element("div");
			label2 = element("label");
			t10 = text("E-mail");
			t11 = space();
			input2 = element("input");
			t12 = space();
			div7 = element("div");
			div6 = element("div");
			label3 = element("label");
			t13 = text("Message");
			t14 = space();
			textarea = element("textarea");
			t15 = space();
			div11 = element("div");
			div8 = element("div");
			button = element("button");
			t16 = text("Send");
			t17 = space();
			div9 = element("div");
			if (if_block1) if_block1.c();
			t18 = space();
			div10 = element("div");
			t19 = space();
			div15 = element("div");
			create_component(aside.$$.fragment);
			t20 = space();
			div18 = element("div");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t0 = claim_space(section_nodes);
			div17 = claim_element(section_nodes, "DIV", { class: true });
			var div17_nodes = children(div17);
			div16 = claim_element(div17_nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			div14 = claim_element(div16_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			div13 = claim_element(div14_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			div12 = claim_element(div13_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			h2 = claim_element(div12_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			if_block0.l(h2_nodes);
			h2_nodes.forEach(detach);
			t1 = claim_space(div12_nodes);
			p = claim_element(div12_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*articleBody*/ ctx[4]);
			p_nodes.forEach(detach);
			t3 = claim_space(div12_nodes);

			form = claim_element(div12_nodes, "FORM", {
				id: true,
				method: true,
				action: true,
				class: true
			});

			var form_nodes = children(form);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			label0 = claim_element(div1_nodes, "LABEL", { class: true, for: true });
			var label0_nodes = children(label0);
			t4 = claim_text(label0_nodes, "First Name");
			label0_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);

			input0 = claim_element(div1_nodes, "INPUT", {
				class: true,
				name: true,
				type: true,
				placeholder: true
			});

			div1_nodes.forEach(detach);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label1 = claim_element(div2_nodes, "LABEL", { class: true, for: true });
			var label1_nodes = children(label1);
			t7 = claim_text(label1_nodes, "Last Name");
			label1_nodes.forEach(detach);
			t8 = claim_space(div2_nodes);

			input1 = claim_element(div2_nodes, "INPUT", {
				class: true,
				name: true,
				type: true,
				placeholder: true
			});

			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t9 = claim_space(form_nodes);
			div5 = claim_element(form_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			label2 = claim_element(div4_nodes, "LABEL", { class: true, for: true });
			var label2_nodes = children(label2);
			t10 = claim_text(label2_nodes, "E-mail");
			label2_nodes.forEach(detach);
			t11 = claim_space(div4_nodes);

			input2 = claim_element(div4_nodes, "INPUT", {
				class: true,
				name: true,
				type: true,
				placeholder: true
			});

			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			t12 = claim_space(form_nodes);
			div7 = claim_element(form_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			label3 = claim_element(div6_nodes, "LABEL", { class: true, for: true });
			var label3_nodes = children(label3);
			t13 = claim_text(label3_nodes, "Message");
			label3_nodes.forEach(detach);
			t14 = claim_space(div6_nodes);

			textarea = claim_element(div6_nodes, "TEXTAREA", {
				class: true,
				name: true,
				placeholder: true
			});

			children(textarea).forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t15 = claim_space(form_nodes);
			div11 = claim_element(form_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div8 = claim_element(div11_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			button = claim_element(div8_nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t16 = claim_text(button_nodes, "Send");
			button_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			t17 = claim_space(div11_nodes);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			if (if_block1) if_block1.l(div9_nodes);
			div9_nodes.forEach(detach);
			t18 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			children(div10).forEach(detach);
			div11_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			div13_nodes.forEach(detach);
			div14_nodes.forEach(detach);
			t19 = claim_space(div16_nodes);
			div15 = claim_element(div16_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			claim_component(aside.$$.fragment, div15_nodes);
			div15_nodes.forEach(detach);
			div16_nodes.forEach(detach);
			div17_nodes.forEach(detach);
			t20 = claim_space(section_nodes);
			div18 = claim_element(section_nodes, "DIV", { class: true });
			children(div18).forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "w-0 md:w-1/12 xl:w-2/12");
			attr(h2, "class", "header text-xl md:text-2xl lg:text-3xl my-6");
			attr(p, "class", "mb-10");
			attr(label0, "class", "block uppercase tracking-wide header mb-2");
			attr(label0, "for", "firstName");
			attr(input0, "class", "appearance-none block w-full bg-gray-100 text-gray-700 border border-gray-400 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white");
			attr(input0, "name", "firstName");
			attr(input0, "type", "text");
			attr(input0, "placeholder", "Jane");
			attr(div1, "class", "w-full md:w-1/2 px-3 mb-6 md:mb-0");
			attr(label1, "class", "block uppercase tracking-wide header mb-2");
			attr(label1, "for", "lastName");
			attr(input1, "class", "appearance-none block w-full bg-gray-100 text-gray-700 border border-gray-400 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white");
			attr(input1, "name", "lastName");
			attr(input1, "type", "text");
			attr(input1, "placeholder", "Doe");
			attr(div2, "class", "w-full md:w-1/2 px-3");
			attr(div3, "class", "flex flex-wrap -mx-3 mb-6");
			attr(label2, "class", "block uppercase tracking-wide header mb-2");
			attr(label2, "for", "email");
			attr(input2, "class", "appearance-none block w-full bg-gray-100 text-gray-700 border border-gray-400 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white");
			attr(input2, "name", "email");
			attr(input2, "type", "email");
			attr(input2, "placeholder", "Jane.Doe@example.net");
			input2.required = true;
			attr(div4, "class", "w-full px-3");
			attr(div5, "class", "flex flex-wrap -mx-3 mb-6");
			attr(label3, "class", "block uppercase tracking-wide header mb-2");
			attr(label3, "for", "messageBody");
			attr(textarea, "class", " no-resize appearance-none block w-full bg-gray-100 text-gray-700 border border-gray-400 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white h-48 resize-none");
			attr(textarea, "name", "message");
			attr(textarea, "placeholder", "Write something here...");
			attr(div6, "class", "w-full px-3");
			attr(div7, "class", "flex flex-wrap -mx-3 mb-6");
			attr(button, "class", "btn-outline mb-6 px-4 rounded");
			attr(button, "type", "submit");
			attr(div8, "class", "md:w-1/3");
			attr(div9, "class", "block tracking-wide header mb-6 px-4");
			attr(div10, "class", "md:w-2/3");
			attr(div11, "class", "md:flex md:items-center");
			attr(form, "id", "contactform");
			attr(form, "method", "post");
			attr(form, "action", reqUrl);
			attr(form, "class", "w-full max-w-lg");
			attr(div12, "class", "mx-2 md:mx-6 mb-2 md:mb-3 my-1");
			attr(div13, "class", "rounded-xl overflow-hidden shadow-md bg-secondary");
			attr(div14, "class", "w-full md:w-9/12 mb-lg-0 px-0 sm:pr-10");
			attr(div15, "class", "w-full md:w-3/12 mb-lg-0 px-0");
			attr(div16, "class", "row md:flex md:flex-wrap");
			attr(div17, "class", "w-full md:w-10/12 xl:w-8/12 px-2 md:px-0");
			attr(div18, "class", "w-0 md:w-1/12 xl:w-2/12");
			attr(section, "class", "section flex flex-wrap items-center justify-between");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			append(section, t0);
			append(section, div17);
			append(div17, div16);
			append(div16, div14);
			append(div14, div13);
			append(div13, div12);
			append(div12, h2);
			if_block0.m(h2, null);
			append(div12, t1);
			append(div12, p);
			append(p, t2);
			append(div12, t3);
			append(div12, form);
			append(form, div3);
			append(div3, div1);
			append(div1, label0);
			append(label0, t4);
			append(div1, t5);
			append(div1, input0);
			set_input_value(input0, /*frmObj*/ ctx[6].firstname);
			append(div3, t6);
			append(div3, div2);
			append(div2, label1);
			append(label1, t7);
			append(div2, t8);
			append(div2, input1);
			set_input_value(input1, /*frmObj*/ ctx[6].lastname);
			append(form, t9);
			append(form, div5);
			append(div5, div4);
			append(div4, label2);
			append(label2, t10);
			append(div4, t11);
			append(div4, input2);
			set_input_value(input2, /*frmObj*/ ctx[6].email);
			append(form, t12);
			append(form, div7);
			append(div7, div6);
			append(div6, label3);
			append(label3, t13);
			append(div6, t14);
			append(div6, textarea);
			set_input_value(textarea, /*frmObj*/ ctx[6].message);
			append(form, t15);
			append(form, div11);
			append(div11, div8);
			append(div8, button);
			append(button, t16);
			append(div11, t17);
			append(div11, div9);
			if (if_block1) if_block1.m(div9, null);
			append(div11, t18);
			append(div11, div10);
			append(div16, t19);
			append(div16, div15);
			mount_component(aside, div15, null);
			append(section, t20);
			append(section, div18);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen(input1, "input", /*input1_input_handler*/ ctx[12]),
					listen(input2, "input", /*input2_input_handler*/ ctx[13]),
					listen(textarea, "input", /*textarea_input_handler*/ ctx[14]),
					listen(form, "submit", prevent_default(/*handleOnSubmit*/ ctx[9]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if_block0.p(ctx, dirty);
			if (!current || dirty & /*articleBody*/ 16) set_data(t2, /*articleBody*/ ctx[4]);

			if (dirty & /*frmObj*/ 64 && input0.value !== /*frmObj*/ ctx[6].firstname) {
				set_input_value(input0, /*frmObj*/ ctx[6].firstname);
			}

			if (dirty & /*frmObj*/ 64 && input1.value !== /*frmObj*/ ctx[6].lastname) {
				set_input_value(input1, /*frmObj*/ ctx[6].lastname);
			}

			if (dirty & /*frmObj*/ 64 && input2.value !== /*frmObj*/ ctx[6].email) {
				set_input_value(input2, /*frmObj*/ ctx[6].email);
			}

			if (dirty & /*frmObj*/ 64) {
				set_input_value(textarea, /*frmObj*/ ctx[6].message);
			}

			if (/*contact*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div9, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			const aside_changes = {};
			if (dirty & /*allPosts*/ 1) aside_changes.allPosts = /*allPosts*/ ctx[0];
			if (dirty & /*catgPosts*/ 2) aside_changes.catgPosts = /*catgPosts*/ ctx[1];
			if (dirty & /*tagsPosts*/ 4) aside_changes.tagsPosts = /*tagsPosts*/ ctx[2];
			aside.$set(aside_changes);
		},
		i(local) {
			if (current) return;
			transition_in(aside.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(aside.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if_block0.d();
			if (if_block1) if_block1.d();
			destroy_component(aside);
			mounted = false;
			run_all(dispose);
		}
	};
}

const reqUrl = "/api/submit";

function instance($$self, $$props, $$invalidate) {
	let { idxContent } = $$props,
		{ allPosts } = $$props,
		{ catgPosts } = $$props,
		{ tagsPosts } = $$props;

	let { title } = $$props, { articleBody } = $$props;
	const tname = title.split(" ");
	const socialLinks = idxContent.socialLinks;
	let contact;

	// What: Setup the default form data object
	// Why:  Define JSON payload for sending emails
	// How:  Initiate attributes with empty strings and then bind values
	//       from form submission to keys using svelte value binding
	let frmObj = {};

	async function handleOnSubmit() {
		$$invalidate(6, frmObj.subject = "Contact Form: " + idxContent.name, frmObj);

		$$invalidate(5, contact = new Response("Send",
		{
				"status": 200,
				"statusText": "Processing"
			}));

		$$invalidate(5, contact = await send_contact(reqUrl, frmObj));

		if (contact.statusText === "Accepted") {
			$$invalidate(6, frmObj = {});
		}
	}

	function input0_input_handler() {
		frmObj.firstname = this.value;
		$$invalidate(6, frmObj);
	}

	function input1_input_handler() {
		frmObj.lastname = this.value;
		$$invalidate(6, frmObj);
	}

	function input2_input_handler() {
		frmObj.email = this.value;
		$$invalidate(6, frmObj);
	}

	function textarea_input_handler() {
		frmObj.message = this.value;
		$$invalidate(6, frmObj);
	}

	$$self.$$set = $$props => {
		if ("idxContent" in $$props) $$invalidate(10, idxContent = $$props.idxContent);
		if ("allPosts" in $$props) $$invalidate(0, allPosts = $$props.allPosts);
		if ("catgPosts" in $$props) $$invalidate(1, catgPosts = $$props.catgPosts);
		if ("tagsPosts" in $$props) $$invalidate(2, tagsPosts = $$props.tagsPosts);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("articleBody" in $$props) $$invalidate(4, articleBody = $$props.articleBody);
	};

	return [
		allPosts,
		catgPosts,
		tagsPosts,
		title,
		articleBody,
		contact,
		frmObj,
		tname,
		socialLinks,
		handleOnSubmit,
		idxContent,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		textarea_input_handler
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			idxContent: 10,
			allPosts: 0,
			catgPosts: 1,
			tagsPosts: 2,
			title: 3,
			articleBody: 4
		});
	}
}

export default Component;