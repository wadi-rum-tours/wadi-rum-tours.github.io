/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import Search from "../components/search.svelte";
import Social from "../components/social.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i].path;
	child_ctx[7] = list[i].name;
	child_ctx[8] = list[i].length;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i].path;
	child_ctx[7] = list[i].name;
	child_ctx[8] = list[i].length;
	return child_ctx;
}

// (20:8) {#each Object(catgPosts) as { path, name, length }}
function create_each_block_1(ctx) {
	let li;
	let a;
	let t0_value = /*name*/ ctx[7] + "";
	let t0;
	let t1;
	let t2_value = /*length*/ ctx[8] + "";
	let t2;
	let t3;
	let a_href_value;
	let t4;
	let li_class_value;

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = text(" (");
			t2 = text(t2_value);
			t3 = text(")");
			t4 = space();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			t1 = claim_text(a_nodes, " (");
			t2 = claim_text(a_nodes, t2_value);
			t3 = claim_text(a_nodes, ")");
			a_nodes.forEach(detach);
			t4 = claim_space(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*path*/ ctx[6]);

			attr(li, "class", li_class_value = "flex" + ((/*catg*/ ctx[0] ? /*catg*/ ctx[0].name : "") == /*name*/ ctx[7]
			? " active"
			: "") + " svelte-htt49j");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			append(a, t2);
			append(a, t3);
			append(li, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*catgPosts*/ 16 && t0_value !== (t0_value = /*name*/ ctx[7] + "")) set_data(t0, t0_value);
			if (dirty & /*catgPosts*/ 16 && t2_value !== (t2_value = /*length*/ ctx[8] + "")) set_data(t2, t2_value);

			if (dirty & /*catgPosts*/ 16 && a_href_value !== (a_href_value = /*path*/ ctx[6])) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*catg, catgPosts*/ 17 && li_class_value !== (li_class_value = "flex" + ((/*catg*/ ctx[0] ? /*catg*/ ctx[0].name : "") == /*name*/ ctx[7]
			? " active"
			: "") + " svelte-htt49j")) {
				attr(li, "class", li_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (32:8) {#each Object(tagsPosts) as { path, name, length }}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*name*/ ctx[7] + "";
	let t0;
	let t1;
	let t2_value = /*length*/ ctx[8] + "";
	let t2;
	let t3;
	let a_href_value;
	let t4;
	let li_class_value;

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = text(" (");
			t2 = text(t2_value);
			t3 = text(")");
			t4 = space();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			t1 = claim_text(a_nodes, " (");
			t2 = claim_text(a_nodes, t2_value);
			t3 = claim_text(a_nodes, ")");
			a_nodes.forEach(detach);
			t4 = claim_space(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*path*/ ctx[6]);

			attr(li, "class", li_class_value = "flex" + ((/*tag*/ ctx[1] ? /*tag*/ ctx[1].name : "") == /*name*/ ctx[7]
			? " active"
			: "") + " svelte-htt49j");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			append(a, t2);
			append(a, t3);
			append(li, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*tagsPosts*/ 32 && t0_value !== (t0_value = /*name*/ ctx[7] + "")) set_data(t0, t0_value);
			if (dirty & /*tagsPosts*/ 32 && t2_value !== (t2_value = /*length*/ ctx[8] + "")) set_data(t2, t2_value);

			if (dirty & /*tagsPosts*/ 32 && a_href_value !== (a_href_value = /*path*/ ctx[6])) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*tag, tagsPosts*/ 34 && li_class_value !== (li_class_value = "flex" + ((/*tag*/ ctx[1] ? /*tag*/ ctx[1].name : "") == /*name*/ ctx[7]
			? " active"
			: "") + " svelte-htt49j")) {
				attr(li, "class", li_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let aside;
	let div2;
	let search;
	let t0;
	let social;
	let t1;
	let div0;
	let h40;
	let span;
	let t2;
	let t3;
	let ul0;
	let t4;
	let div1;
	let h41;
	let t5;
	let t6;
	let ul1;
	let current;
	search = new Search({ props: { allPosts: /*allPosts*/ ctx[2] } });

	social = new Social({
			props: { socialLinks: /*socialLinks*/ ctx[3] }
		});

	let each_value_1 = Object(/*catgPosts*/ ctx[4]);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = Object(/*tagsPosts*/ ctx[5]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			aside = element("aside");
			div2 = element("div");
			create_component(search.$$.fragment);
			t0 = space();
			create_component(social.$$.fragment);
			t1 = space();
			div0 = element("div");
			h40 = element("h4");
			span = element("span");
			t2 = text("Categories");
			t3 = space();
			ul0 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t4 = space();
			div1 = element("div");
			h41 = element("h4");
			t5 = text("Tags");
			t6 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			aside = claim_element(nodes, "ASIDE", { class: true });
			var aside_nodes = children(aside);
			div2 = claim_element(aside_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(search.$$.fragment, div2_nodes);
			t0 = claim_space(div2_nodes);
			claim_component(social.$$.fragment, div2_nodes);
			t1 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h40 = claim_element(div0_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			span = claim_element(h40_nodes, "SPAN", {});
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Categories");
			span_nodes.forEach(detach);
			h40_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);
			ul0 = claim_element(div0_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul0_nodes);
			}

			ul0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h41 = claim_element(div1_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t5 = claim_text(h41_nodes, "Tags");
			h41_nodes.forEach(detach);
			t6 = claim_space(div1_nodes);
			ul1 = claim_element(div1_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul1_nodes);
			}

			ul1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			aside_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h40, "class", "header mb-1");
			attr(ul0, "class", "text-aside mb-4");
			attr(div0, "class", "row");
			attr(h41, "class", "header mb-1 w-full flex");
			attr(ul1, "class", "text-aside mb-4");
			attr(div1, "class", "row");
			attr(div2, "class", "pl-0 pl-lg-4");
			attr(aside, "class", "w-full");
		},
		m(target, anchor) {
			insert(target, aside, anchor);
			append(aside, div2);
			mount_component(search, div2, null);
			append(div2, t0);
			mount_component(social, div2, null);
			append(div2, t1);
			append(div2, div0);
			append(div0, h40);
			append(h40, span);
			append(span, t2);
			append(div0, t3);
			append(div0, ul0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul0, null);
			}

			append(div2, t4);
			append(div2, div1);
			append(div1, h41);
			append(h41, t5);
			append(div1, t6);
			append(div1, ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul1, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			const search_changes = {};
			if (dirty & /*allPosts*/ 4) search_changes.allPosts = /*allPosts*/ ctx[2];
			search.$set(search_changes);
			const social_changes = {};
			if (dirty & /*socialLinks*/ 8) social_changes.socialLinks = /*socialLinks*/ ctx[3];
			social.$set(social_changes);

			if (dirty & /*catg, Object, catgPosts*/ 17) {
				each_value_1 = Object(/*catgPosts*/ ctx[4]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(ul0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*tag, Object, tagsPosts*/ 34) {
				each_value = Object(/*tagsPosts*/ ctx[5]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			transition_in(social.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search.$$.fragment, local);
			transition_out(social.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(aside);
			destroy_component(search);
			destroy_component(social);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { catg } = $$props,
		{ tag } = $$props,
		{ allPosts } = $$props,
		{ socialLinks } = $$props,
		{ catgPosts } = $$props,
		{ tagsPosts } = $$props;

	$$self.$$set = $$props => {
		if ("catg" in $$props) $$invalidate(0, catg = $$props.catg);
		if ("tag" in $$props) $$invalidate(1, tag = $$props.tag);
		if ("allPosts" in $$props) $$invalidate(2, allPosts = $$props.allPosts);
		if ("socialLinks" in $$props) $$invalidate(3, socialLinks = $$props.socialLinks);
		if ("catgPosts" in $$props) $$invalidate(4, catgPosts = $$props.catgPosts);
		if ("tagsPosts" in $$props) $$invalidate(5, tagsPosts = $$props.tagsPosts);
	};

	return [catg, tag, allPosts, socialLinks, catgPosts, tagsPosts];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			catg: 0,
			tag: 1,
			allPosts: 2,
			socialLinks: 3,
			catgPosts: 4,
			tagsPosts: 5
		});
	}
}

export default Component;