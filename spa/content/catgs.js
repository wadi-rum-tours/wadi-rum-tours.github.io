/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import Aside from "../components/aside.svelte";
import PostList from "../components/list_catgs.svelte";

function create_fragment(ctx) {
	let div7;
	let section;
	let div0;
	let t0;
	let div5;
	let div4;
	let div2;
	let div1;
	let postlist;
	let t1;
	let div3;
	let aside;
	let t2;
	let div6;
	let current;

	postlist = new PostList({
			props: {
				catg: /*catg*/ ctx[3],
				catgPosts: /*catgPosts*/ ctx[1],
				tagsPosts: /*tagsPosts*/ ctx[2]
			}
		});

	aside = new Aside({
			props: {
				allPosts: /*allPosts*/ ctx[0],
				catgPosts: /*catgPosts*/ ctx[1],
				tagsPosts: /*tagsPosts*/ ctx[2],
				socialLinks: /*socialLinks*/ ctx[4],
				catg: /*catg*/ ctx[3]
			}
		});

	return {
		c() {
			div7 = element("div");
			section = element("section");
			div0 = element("div");
			t0 = space();
			div5 = element("div");
			div4 = element("div");
			div2 = element("div");
			div1 = element("div");
			create_component(postlist.$$.fragment);
			t1 = space();
			div3 = element("div");
			create_component(aside.$$.fragment);
			t2 = space();
			div6 = element("div");
			this.h();
		},
		l(nodes) {
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			section = claim_element(div7_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t0 = claim_space(section_nodes);
			div5 = claim_element(section_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(postlist.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t1 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(aside.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			t2 = claim_space(section_nodes);
			div6 = claim_element(section_nodes, "DIV", { class: true });
			children(div6).forEach(detach);
			section_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "w-0 md:w-1/12 xl:w-2/12");
			attr(div1, "class", "grid grid-cols-1 gap-6 md:pr-10");
			attr(div2, "class", "w-full md:w-9/12 mb-lg-0 px-0");
			attr(div3, "class", "w-full md:w-3/12 mb-lg-0 px-0");
			attr(div4, "class", "row md:flex md:flex-wrap");
			attr(div5, "class", "w-full md:w-10/12 xl:w-8/12 px-2 md:px-0");
			attr(div6, "class", "w-0 md:w-1/12 xl:w-2/12");
			attr(section, "class", "w-full flex flex-wrap items-center justify-between");
			attr(div7, "class", "w-full py-6 sm:py-16");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, section);
			append(section, div0);
			append(section, t0);
			append(section, div5);
			append(div5, div4);
			append(div4, div2);
			append(div2, div1);
			mount_component(postlist, div1, null);
			append(div4, t1);
			append(div4, div3);
			mount_component(aside, div3, null);
			append(section, t2);
			append(section, div6);
			current = true;
		},
		p(ctx, [dirty]) {
			const postlist_changes = {};
			if (dirty & /*catg*/ 8) postlist_changes.catg = /*catg*/ ctx[3];
			if (dirty & /*catgPosts*/ 2) postlist_changes.catgPosts = /*catgPosts*/ ctx[1];
			if (dirty & /*tagsPosts*/ 4) postlist_changes.tagsPosts = /*tagsPosts*/ ctx[2];
			postlist.$set(postlist_changes);
			const aside_changes = {};
			if (dirty & /*allPosts*/ 1) aside_changes.allPosts = /*allPosts*/ ctx[0];
			if (dirty & /*catgPosts*/ 2) aside_changes.catgPosts = /*catgPosts*/ ctx[1];
			if (dirty & /*tagsPosts*/ 4) aside_changes.tagsPosts = /*tagsPosts*/ ctx[2];
			if (dirty & /*catg*/ 8) aside_changes.catg = /*catg*/ ctx[3];
			aside.$set(aside_changes);
		},
		i(local) {
			if (current) return;
			transition_in(postlist.$$.fragment, local);
			transition_in(aside.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(postlist.$$.fragment, local);
			transition_out(aside.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div7);
			destroy_component(postlist);
			destroy_component(aside);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let catg;

	let { idxContent } = $$props,
		{ allPosts } = $$props,
		{ content } = $$props,
		{ catgPosts } = $$props,
		{ tagsPosts } = $$props;

	let socialLinks = idxContent.socialLinks;

	$$self.$$set = $$props => {
		if ("idxContent" in $$props) $$invalidate(5, idxContent = $$props.idxContent);
		if ("allPosts" in $$props) $$invalidate(0, allPosts = $$props.allPosts);
		if ("content" in $$props) $$invalidate(6, content = $$props.content);
		if ("catgPosts" in $$props) $$invalidate(1, catgPosts = $$props.catgPosts);
		if ("tagsPosts" in $$props) $$invalidate(2, tagsPosts = $$props.tagsPosts);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*content, catgPosts*/ 66) {
			$: $$invalidate(3, catg = {
				name: content.fields.name,
				route: content.fields.route,
				posts: Object(catgPosts.filter(key => key.name == content.fields.name)[0]).posts
			});
		}
	};

	return [allPosts, catgPosts, tagsPosts, catg, socialLinks, idxContent, content];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			idxContent: 5,
			allPosts: 0,
			content: 6,
			catgPosts: 1,
			tagsPosts: 2
		});
	}
}

export default Component;