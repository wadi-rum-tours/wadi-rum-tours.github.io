/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import PostMeta from "./post_meta.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (30:4) {#if value.length >= 3}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*allPosts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*allPosts, pm, value*/ 7) {
				each_value = /*allPosts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (33:8) {#if post.fields.articleBody           .toLowerCase()           .includes(value.toLowerCase()) || post.fields.title             .toLowerCase()             .includes(value.toLowerCase())}
function create_if_block_1(ctx) {
	let div2;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div1;
	let h5;
	let a;
	let t1_value = /*post*/ ctx[4].fields.title + "";
	let t1;
	let a_href_value;
	let t2;
	let div0;
	let postmeta;
	let t3;
	let current;

	postmeta = new PostMeta({
			props: { post: /*post*/ ctx[4], pm: /*pm*/ ctx[2] }
		});

	return {
		c() {
			div2 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			h5 = element("h5");
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			div0 = element("div");
			create_component(postmeta.$$.fragment);
			t3 = space();
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			img = claim_element(div2_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h5 = claim_element(div1_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			a = claim_element(h5_nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach);
			h5_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, role: true });
			var div0_nodes = children(div0);
			claim_component(postmeta.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t3 = claim_space(div2_nodes);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "class", "inline-block object-cover rounded-full w-16 h-16");
			if (img.src !== (img_src_value = "assets/posts/" + /*post*/ ctx[4].fields.image.src)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*post*/ ctx[4].fields.image.alt);
			attr(a, "href", a_href_value = /*post*/ ctx[4].path);
			attr(h5, "class", "header mt-0 mb-1");
			attr(div0, "class", "text-meta flex flex-wrap");
			attr(div0, "role", "complementary");
			attr(div1, "class", "inline-block ml-2");
			attr(div2, "class", "flex items-center mb-5");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, img);
			append(div2, t0);
			append(div2, div1);
			append(div1, h5);
			append(h5, a);
			append(a, t1);
			append(div1, t2);
			append(div1, div0);
			mount_component(postmeta, div0, null);
			append(div2, t3);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*allPosts*/ 1 && img.src !== (img_src_value = "assets/posts/" + /*post*/ ctx[4].fields.image.src)) {
				attr(img, "src", img_src_value);
			}

			if (!current || dirty & /*allPosts*/ 1 && img_alt_value !== (img_alt_value = /*post*/ ctx[4].fields.image.alt)) {
				attr(img, "alt", img_alt_value);
			}

			if ((!current || dirty & /*allPosts*/ 1) && t1_value !== (t1_value = /*post*/ ctx[4].fields.title + "")) set_data(t1, t1_value);

			if (!current || dirty & /*allPosts*/ 1 && a_href_value !== (a_href_value = /*post*/ ctx[4].path)) {
				attr(a, "href", a_href_value);
			}

			const postmeta_changes = {};
			if (dirty & /*allPosts*/ 1) postmeta_changes.post = /*post*/ ctx[4];
			postmeta.$set(postmeta_changes);
		},
		i(local) {
			if (current) return;
			transition_in(postmeta.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(postmeta.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(postmeta);
		}
	};
}

// (32:6) {#each allPosts as post, i}
function create_each_block(ctx) {
	let show_if = /*post*/ ctx[4].fields.articleBody.toLowerCase().includes(/*value*/ ctx[1].toLowerCase()) || /*post*/ ctx[4].fields.title.toLowerCase().includes(/*value*/ ctx[1].toLowerCase());
	let if_block_anchor;
	let current;
	let if_block = show_if && create_if_block_1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*allPosts, value*/ 3) show_if = /*post*/ ctx[4].fields.articleBody.toLowerCase().includes(/*value*/ ctx[1].toLowerCase()) || /*post*/ ctx[4].fields.title.toLowerCase().includes(/*value*/ ctx[1].toLowerCase());

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*allPosts, value*/ 3) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let h4;
	let span0;
	let t0;
	let t1;
	let span1;
	let input;
	let t2;
	let div0;
	let current;
	let mounted;
	let dispose;
	let if_block = /*value*/ ctx[1].length >= 3 && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			h4 = element("h4");
			span0 = element("span");
			t0 = text("Search");
			t1 = space();
			span1 = element("span");
			input = element("input");
			t2 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h4 = claim_element(div1_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			span0 = claim_element(h4_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "Search");
			span0_nodes.forEach(detach);
			h4_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			span1 = claim_element(div1_nodes, "SPAN", { class: true, role: true });
			var span1_nodes = children(span1);

			input = claim_element(span1_nodes, "INPUT", {
				class: true,
				id: true,
				role: true,
				placeholder: true
			});

			span1_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (if_block) if_block.l(div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h4, "class", "header mt-0");
			attr(input, "class", "appearance-none block w-full bg-gray-100 border text-gray-700 border-gray-400 mb-5 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white");
			attr(input, "id", "search");
			attr(input, "role", "searchbox");
			attr(input, "placeholder", "Search articles...");
			attr(span1, "class", "flex flex-wrap items-center");
			attr(span1, "role", "search");
			attr(div0, "class", "row");
			attr(div1, "class", "row");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h4);
			append(h4, span0);
			append(span0, t0);
			append(div1, t1);
			append(div1, span1);
			append(span1, input);
			set_input_value(input, /*value*/ ctx[1]);
			append(div1, t2);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
				set_input_value(input, /*value*/ ctx[1]);
			}

			if (/*value*/ ctx[1].length >= 3) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*value*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allPosts } = $$props;

	// Post Meta configuration values
	const pm = {
		author: false,
		date_modified: true,
		date_created: false,
		description: false,
		catg_tags: false,
		continue: false
	};

	let value = "";

	function input_input_handler() {
		value = this.value;
		$$invalidate(1, value);
	}

	$$self.$$set = $$props => {
		if ("allPosts" in $$props) $$invalidate(0, allPosts = $$props.allPosts);
	};

	return [allPosts, value, pm, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allPosts: 0 });
	}
}

export default Component;