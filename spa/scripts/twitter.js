/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	claim_element,
	claim_space,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "svelte/internal";

function create_if_block_1(ctx) {
	let meta;

	return {
		c() {
			meta = element("meta");
			this.h();
		},
		l(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h() {
			attr(meta, "name", "twitter:image");
			attr(meta, "content", /*image_url*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, meta, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*image_url*/ 2) {
				attr(meta, "content", /*image_url*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(meta);
		}
	};
}

// (12:0) {#if twitterUsername}
function create_if_block(ctx) {
	let meta0;
	let t;
	let meta1;

	return {
		c() {
			meta0 = element("meta");
			t = space();
			meta1 = element("meta");
			this.h();
		},
		l(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true });
			t = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h() {
			attr(meta0, "name", "twitter:creator");
			attr(meta0, "content", /*twitterUsername*/ ctx[2]);
			attr(meta1, "name", "twitter:site");
			attr(meta1, "content", /*twitterUsername*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, meta0, anchor);
			insert(target, t, anchor);
			insert(target, meta1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*twitterUsername*/ 4) {
				attr(meta0, "content", /*twitterUsername*/ ctx[2]);
			}

			if (dirty & /*twitterUsername*/ 4) {
				attr(meta1, "content", /*twitterUsername*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(meta0);
			if (detaching) detach(t);
			if (detaching) detach(meta1);
		}
	};
}

function create_fragment(ctx) {
	let meta0;
	let t0;
	let t1;
	let t2;
	let meta1;
	let t3;
	let meta2;
	let if_block0 = /*image_url*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = /*twitterUsername*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			meta0 = element("meta");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			meta1 = element("meta");
			t3 = space();
			meta2 = element("meta");
			this.h();
		},
		l(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true });
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t2 = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { name: true, content: true });
			t3 = claim_space(nodes);
			meta2 = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h() {
			attr(meta0, "name", "twitter:card");
			attr(meta0, "content", cardType);
			attr(meta1, "name", "twitter:label1");
			attr(meta1, "content", "Written by");
			attr(meta2, "name", "twitter:data1");
			attr(meta2, "content", /*author*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, meta0, anchor);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			insert(target, meta1, anchor);
			insert(target, t3, anchor);
			insert(target, meta2, anchor);
		},
		p(ctx, [dirty]) {
			if (/*image_url*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*twitterUsername*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*author*/ 1) {
				attr(meta2, "content", /*author*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(meta0);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			if (detaching) detach(meta1);
			if (detaching) detach(t3);
			if (detaching) detach(meta2);
		}
	};
}

let cardType = "summary";

function instance($$self, $$props, $$invalidate) {
	let { author } = $$props, { image_url } = $$props, { twitterUsername } = $$props;

	$$self.$$set = $$props => {
		if ("author" in $$props) $$invalidate(0, author = $$props.author);
		if ("image_url" in $$props) $$invalidate(1, image_url = $$props.image_url);
		if ("twitterUsername" in $$props) $$invalidate(2, twitterUsername = $$props.twitterUsername);
	};

	return [author, image_url, twitterUsername];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			author: 0,
			image_url: 1,
			twitterUsername: 2
		});
	}
}

export default Component;