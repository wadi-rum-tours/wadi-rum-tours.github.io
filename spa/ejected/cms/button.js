/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	children,
	claim_element,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	safe_not_equal,
	set_data,
	text
} from "svelte/internal";

import { publish } from "./publish.js";

function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text(/*buttonText*/ ctx[0]);
		},
		l(nodes) {
			t = claim_text(nodes, /*buttonText*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*buttonText*/ 1) set_data(t, /*buttonText*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (35:31) 
function create_if_block_2(ctx) {
	let t;

	return {
		c() {
			t = text("Changes committed.");
		},
		l(nodes) {
			t = claim_text(nodes, "Changes committed.");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (33:33) 
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("Could not commit the changes.");
		},
		l(nodes) {
			t = claim_text(nodes, "Could not commit the changes.");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (31:4) {#if status == "sending"}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("Sending...");
		},
		l(nodes) {
			t = claim_text(nodes, "Sending...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let button;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[1] == "sending") return create_if_block;
		if (/*status*/ ctx[1] == "failed") return create_if_block_1;
		if (/*status*/ ctx[1] == "sent") return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			button = element("button");
			if_block.c();
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true });
			var button_nodes = children(button);
			if_block.l(button_nodes);
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "type", "submit");
			button.disabled = /*status*/ ctx[1];
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if_block.m(button, null);

			if (!mounted) {
				dispose = listen(button, "click", prevent_default(/*onSubmit*/ ctx[2]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, null);
				}
			}

			if (dirty & /*status*/ 2) {
				button.disabled = /*status*/ ctx[1];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { mediaList } = $$props,
		{ buttonText } = $$props,
		{ action } = $$props,
		{ encoding } = $$props;

	let status;

	const onSubmit = async () => {
		$$invalidate(1, status = "sending");

		try {
			await publish(mediaList, action, encoding);
			$$invalidate(1, status = "sent");
			resetStatus();
		} catch(error) {
			$$invalidate(1, status = "failed");
			resetStatus();
			throw error;
		}
	};

	const resetStatus = () => {
		setTimeout(
			() => {
				$$invalidate(1, status = "");
				$$invalidate(3, mediaList = []);
			},
			700
		);
	};

	$$self.$$set = $$props => {
		if ("mediaList" in $$props) $$invalidate(3, mediaList = $$props.mediaList);
		if ("buttonText" in $$props) $$invalidate(0, buttonText = $$props.buttonText);
		if ("action" in $$props) $$invalidate(4, action = $$props.action);
		if ("encoding" in $$props) $$invalidate(5, encoding = $$props.encoding);
	};

	return [buttonText, status, onSubmit, mediaList, action, encoding];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			mediaList: 3,
			buttonText: 0,
			action: 4,
			encoding: 5
		});
	}
}

export default Component;