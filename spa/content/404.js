/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "svelte/internal";

function create_if_block(ctx) {
	let cite;
	let raw_value = /*image*/ ctx[2].citation + "";

	return {
		c() {
			cite = element("cite");
			this.h();
		},
		l(nodes) {
			cite = claim_element(nodes, "CITE", { class: true });
			var cite_nodes = children(cite);
			cite_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(cite, "class", "text-meta");
		},
		m(target, anchor) {
			insert(target, cite, anchor);
			cite.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*image*/ 4 && raw_value !== (raw_value = /*image*/ ctx[2].citation + "")) cite.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(cite);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div0;
	let t0;
	let div4;
	let div3;
	let img;
	let img_src_value;
	let img_alt_value;
	let t1;
	let div2;
	let h2;
	let i0;
	let t2;
	let span;
	let t3;
	let t4;
	let div1;
	let i1;
	let t5;
	let t6;
	let t7;
	let div5;
	let if_block = /*citation*/ ctx[3] && create_if_block(ctx);

	return {
		c() {
			section = element("section");
			div0 = element("div");
			t0 = space();
			div4 = element("div");
			div3 = element("div");
			img = element("img");
			t1 = space();
			div2 = element("div");
			h2 = element("h2");
			i0 = element("i");
			t2 = space();
			span = element("span");
			t3 = text(/*title*/ ctx[0]);
			t4 = space();
			div1 = element("div");
			i1 = element("i");
			t5 = text(/*articleBody*/ ctx[1]);
			t6 = space();
			if (if_block) if_block.c();
			t7 = space();
			div5 = element("div");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t0 = claim_space(section_nodes);
			div4 = claim_element(section_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			img = claim_element(div3_nodes, "IMG", {
				class: true,
				style: true,
				src: true,
				alt: true
			});

			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			h2 = claim_element(div2_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			i0 = claim_element(h2_nodes, "I", { class: true });
			children(i0).forEach(detach);
			t2 = claim_space(h2_nodes);
			span = claim_element(h2_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t3 = claim_text(span_nodes, /*title*/ ctx[0]);
			span_nodes.forEach(detach);
			h2_nodes.forEach(detach);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			i1 = claim_element(div1_nodes, "I", { class: true });
			var i1_nodes = children(i1);
			t5 = claim_text(i1_nodes, /*articleBody*/ ctx[1]);
			i1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t6 = claim_space(div3_nodes);
			if (if_block) if_block.l(div3_nodes);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t7 = claim_space(section_nodes);
			div5 = claim_element(section_nodes, "DIV", { class: true });
			children(div5).forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "w-0 md:w-1/12 xl:w-2/12");
			attr(img, "class", " w-full object-cover rounded-lg overflow-hidden h-screen-60");
			set_style(img, "filter", "brightness(60%)");
			if (img.src !== (img_src_value = "assets/pages/" + /*image*/ ctx[2].src)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*image*/ ctx[2].alt);
			attr(i0, "class", "text-2xl md:text-3xl lg:text-4xl accent las la-directions");
			attr(span, "class", "text-base md:text-xl lg:text-2xl text-white");
			attr(h2, "class", "header");
			attr(i1, "class", "text-sm md:text-lg lg:text-xl text-white");
			attr(div1, "class", "pl-8 md:pl-9 lg:pl-10");
			attr(div2, "class", "absolute pl-2 md:pl-6");
			set_style(div2, "bottom", "10%");
			attr(div3, "class", "w-full relative");
			attr(div4, "class", "w-full md:w-10/12 xl:w-8/12 px-2 md:px-0");
			attr(div5, "class", "w-0 md:w-1/12 xl:w-2/12");
			attr(section, "class", "w-full section flex flex-wrap items-center justify-between  py-6 sm:py-16");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			append(section, t0);
			append(section, div4);
			append(div4, div3);
			append(div3, img);
			append(div3, t1);
			append(div3, div2);
			append(div2, h2);
			append(h2, i0);
			append(h2, t2);
			append(h2, span);
			append(span, t3);
			append(div2, t4);
			append(div2, div1);
			append(div1, i1);
			append(i1, t5);
			append(div3, t6);
			if (if_block) if_block.m(div3, null);
			append(section, t7);
			append(section, div5);
		},
		p(ctx, [dirty]) {
			if (dirty & /*image*/ 4 && img.src !== (img_src_value = "assets/pages/" + /*image*/ ctx[2].src)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*image*/ 4 && img_alt_value !== (img_alt_value = /*image*/ ctx[2].alt)) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*title*/ 1) set_data(t3, /*title*/ ctx[0]);
			if (dirty & /*articleBody*/ 2) set_data(t5, /*articleBody*/ ctx[1]);
			if (/*citation*/ ctx[3]) if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { articleBody } = $$props, { image } = $$props;
	let citation = image.citation === undefined ? false : true;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("articleBody" in $$props) $$invalidate(1, articleBody = $$props.articleBody);
		if ("image" in $$props) $$invalidate(2, image = $$props.image);
	};

	return [title, articleBody, image, citation];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, articleBody: 1, image: 2 });
	}
}

export default Component;